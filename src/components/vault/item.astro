---
interface Props {
  n: string;
  nh: string;
  c: string;
  ch: string;
}

const { n, nh, c, ch } = Astro.props;
---

<div class="dump-item">
  <dt class="dump-item-title" data-n={n} data-nh={nh}>Encrypted</dt>
  <dd class="dump-item-content" data-c={c} data-ch={ch}>Encrypted</dd>
</div>

<script>
  import {
    btnReset,
    btnDecrypt,
    dumpItems,
    decryptionKeyDomTitle,
    decryptionKeyDomContent,
    Encrypted,
    aesBufferDecryption,
    arrayBufferToHex,
    sha256BufferDigest,
    sha256StringDigest,
  } from "@scripts/browser/vault.ts";

  import { compareSync } from "bcryptjs";

  btnDecrypt.addEventListener("click", async () => {
    for (const item of dumpItems()) {
      const itemTitle: HTMLDListElement =
        item.querySelector(".dump-item-title")!;
      const itemContent: HTMLDListElement =
        item.querySelector(".dump-item-content")!;

      const n = itemTitle.dataset.n!;
      const nh = itemTitle.dataset.nh!;
      const c = itemContent.dataset.c!;
      const ch = itemContent.dataset.ch!;

      const titleBuffer = await aesBufferDecryption(
        decryptionKeyDomTitle.value,
        Uint8Array.from(window.atob(n), (char) => char.charCodeAt(0)).buffer,
      );

      itemTitle.innerText =
        titleBuffer !== null &&
        compareSync(
          arrayBufferToHex(
            await sha256StringDigest(new TextDecoder().decode(titleBuffer)),
          ),
          nh,
        )
          ? new TextDecoder().decode(titleBuffer)
          : "Title Decryption Fail";

      const contentBuffer = await aesBufferDecryption(
        [decryptionKeyDomTitle.value, decryptionKeyDomContent.value].join(""),
        Uint8Array.from(window.atob(c), (char) => char.charCodeAt(0)).buffer,
      );

      if (
        titleBuffer === null ||
        contentBuffer === null ||
        !compareSync(
          arrayBufferToHex(await sha256BufferDigest(contentBuffer)),
          ch,
        )
      ) {
        itemContent.innerText = Encrypted;
        continue;
      }

      const f = new Blob([contentBuffer], {
        type: "application/octet-stream",
      });

      const a = document.createElement("a");
      a.href = URL.createObjectURL(f);
      a.download = itemTitle.innerText;
      a.innerText = "download";

      itemContent.replaceChildren(a);
    }
  });

  btnReset.addEventListener("click", () => {
    dumpItems().forEach((n) => {
      const currenNTitle: HTMLDListElement =
        n.querySelector(".dump-item-title")!;
      const currenNContent: HTMLDListElement =
        n.querySelector(".dump-item-content")!;

      currenNTitle.innerText = Encrypted;
      currenNContent.innerText = Encrypted;
    });
  });
</script>
